const {giveUserCoins, takeUserCoins} = require('../users/userManagement');

const rouletteNumbers = [
    {number: 0, color: 'green'},
    {number: 1, color: 'red'},
    {number: 2, color: 'black'},
    {number: 3, color: 'red'},
    {number: 4, color: 'black'},
    {number: 5, color: 'red'},
    {number: 6, color: 'black'},
    {number: 7, color: 'red'},
    {number: 8, color: 'black'},
    {number: 9, color: 'red'},
    {number: 10, color: 'black'},
    {number: 11, color: 'black'},
    {number: 12, color: 'red'},
    {number: 13, color: 'black'},
    {number: 14, color: 'red'},
    {number: 15, color: 'black'},
    {number: 16, color: 'red'},
    {number: 17, color: 'black'},
    {number: 18, color: 'red'},
    {number: 19, color: 'red'},
    {number: 20, color: 'black'},
    {number: 21, color: 'red'},
    {number: 22, color: 'black'},
    {number: 23, color: 'red'},
    {number: 24, color: 'black'},
    {number: 25, color: 'red'},
    {number: 26, color: 'black'},
    {number: 27, color: 'red'},
    {number: 28, color: 'black'},
    {number: 29, color: 'black'},
    {number: 30, color: 'red'},
    {number: 31, color: 'black'},
    {number: 32, color: 'red'},
    {number: 33, color: 'black'},
    {number: 34, color: 'red'},
    {number: 35, color: 'black'},
    {number: 36, color: 'red'}
];
const chatGame = new Map();
const message = {
    gameStart: `–ù–∞—á–∏–Ω–∞–µ–º —Ä—É–ª–µ—Ç–∫—É. \n–î–µ–ª–∞–π—Ç–µ –≤–∞—à–∏ —Å—Ç–∞–≤–∫–∏ \n‚ÑπÔ∏è[—Å—Ç–∞–≤–∫–∞, —Ü–µ–ª—å —Å—Ç–∞–≤–∫–∏ (–ß,–ö,—á–∏—Å–ª–æ)]‚ÑπÔ∏è`,
    closeBets: '‚ÑπÔ∏è–°—Ç–∞–≤–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è!‚ÑπÔ∏è',
    gifBet: 'CgACAgQAAx0CUbkCdgABDQReZ2c5_xGDzcX5G9mVfZvWj7iU1xQAAiUDAAKO4QRTlXm9o9WNDKQ2BA',
    gifSpin: 'CgACAgQAAx0CUbkCdgABDQGpZ14JHEAx1GgsS0aL09u-GAnnG2AAAjEDAAJs-wVTcxdLMgqBtaM2BA',
    black: '‚ö´Ô∏è',
    red: 'üî¥',
    green: 'üü¢',
    rules: `<b>–ò–≥—Ä–∞ –≤ —Ä—É–ª–µ—Ç–∫—É</b>\n
-–î–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É –Ω–∞ –ö—Ä–∞—Å–Ω–æ–µ üî¥, –ß–µ—Ä–Ω–æ–µ ‚ö´Ô∏è–∏–ª–∏ –ª—é–±–æ–µ —á–∏—Å–ª–æ [0-36]\n
-–ü—Ä–∏–º–µ—Ä —Å—Ç–∞–≤–∫–∏ "10 —á" - 10 –º–æ–Ω–µ—Ç–æ–∫ –Ω–∞ —á–µ—Ä–Ω–æ–µ\n
-–ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã /roulette –¥–∞—ë—Ç—Å—è 1 –º–∏–Ω—É—Ç–∞ –Ω–∞ –ø—Ä–∏—ë–º —Å—Ç–∞–≤–æ–∫, –ø–æ—Å–ª–µ —á–µ–≥–æ —Ä—É–ª–µ—Ç–∫–∞ –±—É–¥–µ—Ç —Å—ã–≥—Ä–∞–Ω–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏\n`,
}

function roulette(bot) {
    bot.onText(/^\/roulette/gi, (msg) => {
        const {chat: {id: chat_id}} = msg;

        createGameState(chat_id);
        const gameState = getGameState(chat_id);

        startAction(msg, gameState);
    });

    bot.onText(/^\/ruleRoulette/gi, (msg) => {
        const {chat: {id: chat_id}} = msg;
        bot.sendMessage(chat_id, message.rules, {parse_mode: 'html'});
    });

    bot.onText(/^(\d+) (—á|–∫|\d+)$/i, (msg, match) => {
        const {from: {id: user_id, first_name}, chat: {id: chat_id}} = msg;
        const gameState = getGameState(chat_id);
        if (!gameState) return;
        const amount = parseInt(match[1]);
        const position = match[2] === '–∫' ? 'red' : match[2] === '—á' ? 'black' : parseInt(match[2]);
        let textMessage = ``;

        switch (position) {
            case 'red':
                textMessage = `–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: ${amount} –Ω–∞ ${message.red}`;
                break;
            case 'black':
                textMessage = `–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: ${amount} –Ω–∞ ${message.black}`;
                break;
            case 0:
                textMessage = `–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: ${amount} –Ω–∞ ${message.green}`;
                break;
            default:
                textMessage = `–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: ${amount} –Ω–∞ ${position}`;
                break;
        }

        if (gameState.openBets) {
            takeUserCoins(user_id, amount);
            bet(gameState, {'firstname': first_name, 'user_id': user_id, 'amount': amount, 'position': position});
            bot.sendMessage(chat_id, textMessage);
        } else {
            bot.sendMessage(chat_id, '–°—Ç–∞–≤–∫–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è');
        }
    });

    function startAction(msg, state) {
        const {chat: {id: chat_id}} = msg;
        bot.sendDocument(chat_id, message.gifBet, {caption: message.gameStart})
            .then(data => {
                const {message_id, chat: {id: chat_id}} = data;

                // –¢–∞–π–º–µ—Ä –Ω–∞ 1 –º–∏–Ω—É—Ç—É –ø—Ä–∏—ë–º–∞ —Å—Ç–∞–≤–æ–∫
                setTimeout(function () {
                    bot.deleteMessage(chat_id, message_id);
                    spinAction(data, state);
                }, 60000);
            });
    }

    function spinAction(msg, state) {
        const {chat: {id: chat_id}} = msg;
        state.openBets = false;
        bot.sendDocument(chat_id, message.gifSpin, {caption: `–ö—Ä—É—Ç–∏–º...\n${message.closeBets}`})
            .then(data => {
                const {message_id, chat: {id: chat_id}, from: {id: user_id}} = data;
                const spinResult = getSpinResult();
                const winners = determineWinner(spinResult, state.bets);

                setTimeout(function () {
                    bot.deleteMessage(chat_id, message_id);

                    if (winners.length > 0) {
                        winners.map((win) => {giveUserCoins(win.user_id, win.amount*2)});
                        const winnersList = winners.reduce((acc, winner) => {
                            return acc += `${winner.firstname} –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç - ${winner.amount * 2}\n`;
                        }, '');
                        bot.sendMessage(chat_id, `–í—ã–∏–≥—Ä–∞–ª–æ ${spinResult.number} ${message[spinResult.color]}\n\n–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:\n${winnersList}`);
                    }
                    else {
                        bot.sendMessage(chat_id, `–í—ã–∏–≥—Ä–∞–ª–æ ${spinResult.number} ${message[spinResult.color]}\n–ù–∏–∫—Ç–æ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª`);
                    }

                    removeGameState(chat_id);
                }, 3000);
            });
    }
}

function createGameState(id) {
    chatGame.set(id, {
        gameOn: true,
        openBets: true,
        bets: [],
    });
}

function getGameState(id) {
    return chatGame.get(id);
}

function removeGameState(id) {
    chatGame.delete(id);
}

function bet(game, bet) {
    game.bets.push(bet);
}

function getSpinResult() {
    const randomIndex = Math.floor(Math.random() * rouletteNumbers.length);
    return rouletteNumbers[randomIndex];
}

function determineWinner(result, bets) {
    return bets.filter(bet => bet.position === result.number || bet.position === result.color);
}

module.exports = {roulette};

/*
function placeBet(userId, userName, amount, position) {
    bets.push({userId, userName, amount, position});
}

function spinRoulette() {
    const randomIndex = Math.floor(Math.random() * rouletteNumbers.length);
    return rouletteNumbers[randomIndex];
}

function determineWinners(result) {
    return bets.filter(bet => {
        return bet.position === result.number || bet.position === result.color;
    });
}

function resetBets() {
    bets.length = 0;
}

function roulette(bot) {
    bot.onText(/^\/roulette/gi, (msg) => {
        const {chat: {id: chat_id}} = msg;

        chatGame.set(chat_id, {
            gameOn: true,
            openBets: true,
            bets: [],
        })
        const gameState = chatGame.get(chat_id);

        bot.sendDocument(chat_id, message.rouletteBets, {caption: message.gameStart});

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 2 –º–∏–Ω—É—Ç—ã
        setTimeout(() => {
            gameState.openBets = false;
            bot.sendMessage(chat_id, message.closeBets, {
                reply_markup: {
                    inline_keyboard: [[{
                        text: '–ö—Ä—É—Ç–∏—Ç—å',
                        callback_data: `spin${chat_id}`,
                    }]]
                }
            });
        }, 60000); // 2 –º–∏–Ω—É—Ç—ã = 120000 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
    });

    bot.onText(/^(\d+) (—á|–∫|\d+)$/i, (msg, match) => {
        const {from: {id: user_id}, chat: {id: chat_id}} = msg;
        const amount = parseInt(match[1]);
        const position = match[2] === '–∫' ? 'red' : match[2] === '—á' ? 'black' : parseInt(match[2]);
        const gameState = chatGame.get(chat_id);
        if (!gameState.gameOn) return;
        let textMessage = `–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: ${amount} –Ω–∞ ${position}`;

        switch (position) {
            case 'red':
                textMessage = `–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: ${amount} –Ω–∞ üî¥`;
                break;
            case 'black':
                textMessage = `–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: ${amount} –Ω–∞ ‚ö´Ô∏è`;
                break;
            case 0:
                textMessage = `–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: ${amount} –Ω–∞ üü¢`;
                break;
            default:
                textMessage = `–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: ${amount} –Ω–∞ ${position}`;
                break;
        }

        if (gameState.openBets) {
            takeUserCoins(user_id, amount);
            placeBet(user_id, amount, position);
            bot.sendMessage(chat_id, textMessage);
        } else {
            bot.sendMessage(chat_id, '–°—Ç–∞–≤–∫–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è');
        }
    });

    bot.onText(/^\/spin/gi, (msg) => {
        const {chat: {id: chat_id}} = msg;
        const gameState = chatGame.get(chat_id);
        const result = spinRoulette();

        bot.sendDocument(chat_id, message.rouletteSpinner)
            .then(() => {
                setTimeout(() => {
                    bot.sendMessage(chat_id, `–†–µ–∑—É–ª—å—Ç–∞—Ç: ${result.number} (${message[result.color]})`)
                        .then(() => {
                            const winners = determineWinners(result);

                            if (winners.length > 0) {
                                winners.forEach(winner => {
                                    bot.sendMessage(chat_id, `–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winner.userId} –≤—ã–∏–≥—Ä–∞–ª ${winner.amount * 2}`);
                                });
                            } else {
                                bot.sendMessage(chat_id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª.');
                            }

                            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫–∏ –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                            resetBets();
                        });
                }, 5000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –≤—Ä–∞—â–µ–Ω–∏—è
            });

        // bot.editMessageReplyMarkup({inline_keyboard: []}, {chat_id, message_id});
    });

    bot.on('callback_query', (callbackQuery) => {
        const {id, message: {chat: {id: chat_id}, message_id}} = callbackQuery;

        if (callbackQuery.data === `spin${chat_id}`) {
            const result = spinRoulette();
            const color = result.color === 'red' ? '' :
                bot.sendDocument(chat_id, message.rouletteSpinner)
                    .then(() => {
                        setTimeout(() => {
                            bot.sendMessage(chat_id, `–†–µ–∑—É–ª—å—Ç–∞—Ç: ${result.number} (${result.color})`).then(() => {
                                const winners = determineWinners(result);

                                if (winners.length > 0) {
                                    console.log(`winners:`, winners, typeof winners);
                                    let winnersList = winners.reduce((acc, i) => acc += `${i}\n`, '');
                                    console.log(`winners list:`, winnersList, typeof winnersList);
                                    bot.sendMessage(chat_id, `–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: \n${winner.userId} –≤—ã–∏–≥—Ä–∞–ª ${winner.amount * 2}`)
                                } else {
                                    bot.sendMessage(chat_id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª.');
                                }

                                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫–∏ –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                                resetBets();
                            });
                        }, 3000);
                    });

            bot.editMessageReplyMarkup({inline_keyboard: []}, {chat_id, message_id});
        }
    });
}*/